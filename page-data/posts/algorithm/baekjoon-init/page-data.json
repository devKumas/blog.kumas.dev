{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/algorithm/baekjoon-init/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"3031062b-de7d-5e8f-932a-04afb43df356","html":"<h2>개요</h2>\n<p>프로그래머스와 LeetCode와는 다르게 백준에서의 알고리즘 문제 풀이는 입력까지 모두 사용자가 구현해야 합니다. JavaScript로 문제를 풀이할 것이기 때문에 Node 세팅을 해보겠습니다.</p>\n<h2>설치</h2>\n<p>아래의 형식과 같이 프로젝트를 생성해 줍니다.</p>\n<deckgo-highlight-code  terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">├── dev\n│   └── stdin\n└── index.js</code>\n        </deckgo-highlight-code>\n<p>백준은 dev의 stdin파일에 입력 파일이 존재합니다. 해당 파일을 읽어와 코드를 실행할 수 있도록 해보겠습니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">// index.js\nlet fs = require(&#39;fs&#39;)\nlet input = fs.readFileSync(&#39;./dev/stdin&#39;).toString().trim().split(&#39; &#39;)\n\nlet a = parseInt(input[0])\nlet b = parseInt(input[1])\n\nconsole.log(a + b)</code>\n        </deckgo-highlight-code>\n<p>fs모듈을 이용하여 파일을 읽어와 string 타입으로 변환하여 split을 이용하여 분리하는 방식입니다. 여러 줄을 입력을 받는다면 split(‘\\n’)을 이용하여 입력을 받을 수도 있습니다. 또한 구조 분해 할당을 이용한다면 아래와 같이도 사용할 수 있습니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">// index.js\nlet [n, ...arr] = require(&#39;fs&#39;)\n  .readFileSync(&#39;./dev/stdin&#39;)\n  .toString()\n  .trim()\n  .split(&#39;\\\\n&#39;) // 첫번째 입력 항목의 갯수, 두번째 입력항목인 경우\n\nconsole.log(n) // 첫번째 행의 값\nconsole.log(arr) // 나머지 행의 값의 배열</code>\n        </deckgo-highlight-code>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://www.acmicpc.net/\" target=\"_blank\" rel=\"nofollow\">Baekjoon Online Judge</a></li>\n</ul>","frontmatter":{"title":"백준 문제풀이 세팅 (Node.js)","date":"Nov 28, 2021","update":null,"tags":["algorithm","node"]}}}]},"site":{"siteMetadata":{"comment":{"utterances":"devKumas/kumas.dev"}}}},"pageContext":{"slug":"/posts/algorithm/baekjoon-init/"}},"staticQueryHashes":["196858978","2544702736","3159585216"]}