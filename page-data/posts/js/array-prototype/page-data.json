{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/js/array-prototype/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"4f14fe54-2d45-5d3e-b758-93fe467baafb","html":"<h2>Array.prototype</h2>\n<p>모든 Array 인스턴스는 Array.prototype으로부터 메서드와 프로퍼티를 상속받습니다. 이렇게 상속받은 Array.prototype 메서드는 크게 다음과 같이 구분할 수 있습니다.</p>\n<ul>\n<li>원본 배열을 변경하는 메서드</li>\n<li>원본 배열은 변경하지 않고 참조만 하는 메서드</li>\n<li>원본 배열을 반복적으로 참조하는 메서드</li>\n</ul>\n<h3>원본 배열을 변경하는 메서드</h3>\n<ul>\n<li>pop</li>\n</ul>\n<p><code>pop()</code> 메서드는 배열에서 마지막 요소를 제거하고 그 요소를 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">let arr = [1, 2, 3, 4, 5]\narr.pop() // 5\narr.pop() // 4\narr // [1, 2, 3]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>push</li>\n</ul>\n<p><code>push()</code> 메서드는 배열의 끝에 하나 이상의 요소를 추가하고, 배열의 새로운 길이를 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">let arr = [1, 2, 3, 4, 5]\narr.push(0) // 6\narr // [1, 2, 3, 4, 5, 0]\narr.push(6, 7) // 8\narr // [1, 2, 3, 4, 5, 0, 6, 7]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>shift</li>\n</ul>\n<p><code>shift()</code> 메서드는 배열에서 첫 번째 요소를 제거하고, 제거된 요소를 반환합니다. 이 메서드는 배열의 길이를 변하게 합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">let arr = [1, 2, 3, 4, 5]\narr.shift() // 1\narr.shift() // 2\narr // [3, 4, 5]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>unshift</li>\n</ul>\n<p><code>unshift()</code> 메서드는 새로운 요소를 배열의 맨 앞쪽에 추가하고, 새로운 길이를 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">let arr = [1, 2, 3, 4, 5]\narr.unshift(0) // 6\narr // [0, 1, 2, 3, 4, 5, 0]\narr.unshift(6, 7) // 8\narr // [6, 7, 0, 1, 2, 3, 4, 5, 0]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>reverse</li>\n</ul>\n<p><code>reverse()</code> 메서드는 배열의 순서를 반전합니다. 첫 번째 요소는 마지막 요소가 되며 마지막 요소는 첫 번째 요소가 됩니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">let arr = [1, 2, 3, 4, 5]\narr.reverse() // [5, 4, 3, 2, 1]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>sort</li>\n</ul>\n<p><code>sort()</code> 메서드는 배열의 요소를 적절한 위치에 정렬한 후 그 배열을 반환합니다. 기본 정렬 순서는 문자열의 유니코드 코드 포인트를 따릅니다</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">let strArr = [&#39;다&#39;, &#39;가&#39;, &#39;라&#39;, &#39;나&#39;]\nlet numArr = [10, 21, 1, 2, 3]\nstrArr.sort() // [&#39;가&#39;, &#39;나&#39;, &#39;다&#39;, &#39;라&#39;]\nnumArr.sort() // [1, 10, 2, 21, 3]\n\n// 직접 정렬의 방식을 지정해 줄 수도 있다.\nstrArr.sort(function (a, b) {\n  a.localeCompare(b)\n}) // [&#39;가&#39;, &#39;나&#39;, &#39;다&#39;, &#39;라&#39;]\n\nnumArr.sort((a, b) =&gt; {\n  return a - b\n}) // [1, 2, 3, 10, 21]\n\nlet items = [\n  { name: &#39;Edward&#39;, value: 21 },\n  { name: &#39;Sharpe&#39;, value: 37 },\n  { name: &#39;And&#39;, value: 45 },\n  { name: &#39;The&#39;, value: -12 },\n  { name: &#39;Magnetic&#39;, value: 13 },\n  { name: &#39;Zeros&#39;, value: 37 },\n]\n\nitems.sort(function (a, b) {\n  let nameA = a.name.toUpperCase()\n  let nameB = b.name.toUpperCase()\n  if (nameA &lt; nameB) {\n    return -1\n  }\n  if (nameA &gt; nameB) {\n    return 1\n  }\n  return 0\n})</code>\n        </deckgo-highlight-code>\n<ul>\n<li>splice</li>\n</ul>\n<p><code>splice()</code> 메서드는 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">let arr = [&#39;가&#39;, &#39;나&#39;, &#39;다&#39;, &#39;라&#39;, &#39;마&#39;]\n\narr.splice(1, 2, &#39;바&#39;, &#39;사&#39;) // [&#39;나&#39;, &#39;다&#39;]\narr // [&#39;가&#39;, &#39;바&#39;, &#39;사&#39;, &#39;라&#39;, &#39;마&#39;]</code>\n        </deckgo-highlight-code>\n<h3>원본 배열은 변경하지 않고 참조만 하는 메서드</h3>\n<ul>\n<li>join</li>\n</ul>\n<p><code>join()</code> 메서드는 배열의 모든 요소를 연결해 하나의 문자열로 만듭니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [1, 2, 3]\narr.join() // 1,2,3\narr.join(&#39; + &#39;) // 1 + 2 + 3\narr.join(&#39; &#39;) // 1 2 3\narr.join(&#39;&#39;) // 123</code>\n        </deckgo-highlight-code>\n<ul>\n<li>slice</li>\n</ul>\n<p><code>slice()</code> 메서드는 어떤 배열의 begin부터 end까지(end 미포함)에 대한 얕은 복사본을 새로운 배열 객체로 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [1, 2, 3, 4, 5]\narr.slice(1, 3) // [2, 3]\narr.slice(1) // [2, 3, 4, 5]\narr.slice(4, 5) // [5]\narr // [1, 2, 3, 4, 5]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>concat</li>\n</ul>\n<p><code>concat()</code> 메서드는 해당 배열의 뒤에 인수로 전달받은 배열을 합쳐서 만든 새로운 배열을 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [1, 2]\nconst newArr = [3, 4]\narr.concat(newArr) // [1, 2, 3, 4]\narr.concat([5, 6]) // [1, 2, 5, 6]\narr.concat([7], [8, 9]) // [1, 2, 7, 8, 9]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>indexOf</li>\n</ul>\n<p><code>indexOf()</code> 메서드는 배열에서 지정된 요소를 찾을 수 있는 첫 번째 인덱스를 반환하고 존재하지 않으면 -1을 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [&#39;가&#39;, &#39;나&#39;, &#39;다&#39;, &#39;라&#39;, &#39;가&#39;]\narr.indexOf(&#39;가&#39;) // 0\narr.indexOf(&#39;가&#39;, 1) // 4\narr.indexOf(&#39;나&#39;, 2) // -1</code>\n        </deckgo-highlight-code>\n<ul>\n<li>includes</li>\n</ul>\n<p><code>includes()</code> 메서드는 배열이 특정 요소를 포함하고 있는지 판별합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [&#39;가&#39;, &#39;나&#39;, &#39;다&#39;, &#39;라&#39;, &#39;가&#39;]\narr.includes(&#39;가&#39;) // true\narr.includes(&#39;가&#39;, 1) // true\narr.includes(&#39;나&#39;, 2) // false</code>\n        </deckgo-highlight-code>\n<h3>원본 배열을 반복적으로 참조하는 메서드</h3>\n<ul>\n<li>forEach</li>\n</ul>\n<p><code>forEach() 메서드는 주어진 함수를 배열 요소 각각에 대해 실행합니다.</code></p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [&#39;가&#39;, &#39;나&#39;, &#39;다&#39;]\narr.forEach((element) =&gt; {\n  console.log(element)\n})\n\n// 가\n// 나\n// 다</code>\n        </deckgo-highlight-code>\n<ul>\n<li>map</li>\n</ul>\n<p><code>map()</code> 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [1, 2, 3]\nconst newArr = arr.map((x) =&gt; {\n  return x * 2\n})\n\narr // 1, 2, 3\nnewArr // 2, 4, 6</code>\n        </deckgo-highlight-code>\n<ul>\n<li>filter</li>\n</ul>\n<p><code>filter()</code> 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [1, 2, 3, 4, 5]\nconst result = arr.filter((x) =&gt; {\n  return x &gt; 2\n})\n\nresult // [3, 4, 5]</code>\n        </deckgo-highlight-code>\n<ul>\n<li>reduce</li>\n</ul>\n<p><code>reduce()</code> 메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const arr = [1, 2, 3, 4, 5]\nconst resultAdd = arr.reduce((acc, cur, i) =&gt; {\n  return acc + cur // 1 + 2 + 3 + 4 + 5\n}, 0)\n\nconst resultArry = arr.reduce((acc, cur, i) =&gt; {\n  acc.push(cur)\n  return acc // [1, 2, 3, 4, 5]\n}, [])</code>\n        </deckgo-highlight-code>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"nofollow\">MDN Web Docs</a></li>\n</ul>","frontmatter":{"title":"JavaScript의 Array.Prototype","date":"Sep 22, 2021","update":null,"tags":["javascript","prototype"]}}}]},"site":{"siteMetadata":{"comment":{"utterances":"devKumas/kumas.dev"}}}},"pageContext":{"slug":"/posts/js/array-prototype/"}},"staticQueryHashes":["196858978","2544702736","3159585216"]}