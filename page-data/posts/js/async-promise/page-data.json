{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/js/async-promise/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"54eb89e7-6b88-57fa-a7a6-187627f33e8f","html":"<h2>Promise란?</h2>\n<p>Promise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결괏값을 나타냅니다. <code>MDN</code>\nES6에서 추가된 Promise는 비동기 연산을 하기 위한 객체이며 기존의 callback 함괏의 단점들을 보완한 함수입니다.</p>\n<p>Promise는 다음 중 하나의 상태를 가집니다.</p>\n<ul>\n<li>대기(pending): 이행하거나 거부되지 않은 상태</li>\n<li>이행(fulfilled): 연산이 성공적으로 완료됨.</li>\n<li>거부(rejected): 연산이 실패함.</li>\n</ul>\n<h3>Promise의 사용방법</h3>\n<p>Promise는 resolve, reject 두 인자를 매개변수로 받습니다. 이 두 함수는 promise를 이행하거나 거부합니다. 비동기 작업이 모두 끝난 뒤 resolve를 호출해서 이행하고, 오류가 생겼다면 reject를 이용하여 거부할 수 있습니다. 또한 Promise 객체에는 비동기 상태가 담겨있기 때문에 비동기 처리 시점을 명확하게 표시할 수 있습니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const promise = new Promise((resolve, reject) =&gt; {})\n\nconsole.log(promise) // Promise {status: &quot;pending&quot;}</code>\n        </deckgo-highlight-code>\n<h3>then, catch, finally</h3>\n<p>Promise가 종료되면 then과 catch로 resolve와 reject의 값을 꺼내어 볼 수 있습니다. 하지만 reject 된 경우에는 catch 항목이 없다면 오류가 발생합니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const promise1 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; resolve(&#39;성공&#39;), 1000)\n}) // 10초 후에 결과 출력\n\npromise1.then(console.log) // 성공\n\nconst promise2 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; reject(&#39;실패&#39;), 1000)\n}) // 10초 후에 결과 출력\n\npromise2.then(console.log) // 오류가 발생했지만 catch 항목이 없어서 error 발생\n// Uncaught (in promise) 실패\npromise2\n  .then(console.log)\n  .catch(console.error) // 실패\n  .finally(() =&gt; console.log(&#39;종료됨&#39;)) // 이행이나 거부와 상관없이 무조건 실행됨</code>\n        </deckgo-highlight-code>\n<h3>메서드 체이닝</h3>\n<p>Promise의 리턴값은 자기 자신을 반환하기 때문에 함수를 연속적으로 사용할수 있습니다. 또한 연속적으로 사용한 함수에서 에러처리 또한 매번 할 필요 없이 한번만 처리 해주면 됩니다.</p>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">const promise = new Promise((resolve, reject) =&gt; resolve(1));\nconst add1 = (num) =&gt; num + 1;\n\npromise\n  .then(add1)\n  .then(add1) // 연속적으로 then 호출 가능\n  .then(console.log);\n  .catch(console.error); // 연속적으로 then을 호출하더라도 하나의 catch에서 처리</code>\n        </deckgo-highlight-code>\n<h3>Promise.all, Promise.rece</h3>\n<p>Promise 메서드 종류</p>\n<ul>\n<li>Promise.all: 주어진 모든 Promise를 이행합니다.</li>\n<li>Promise.rece: 주어진 모든 Promise 중 가장 먼저 완료된 것만 이행합니다.</li>\n</ul>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">// Promise.all\n\nconst promise1 = new Promise((resolve) =&gt; setTimeout(resolve, 3000, &#39;첫번째&#39;))\n\nconst promise2 = new Promise((resolve) =&gt; setTimeout(resolve, 2000, &#39;두번째&#39;))\n\nconst promise3 = new Promise((resolve) =&gt; setTimeout(resolve, 1000, &#39;세번째&#39;))\n\nconst allPromise = Promise.all([promise1, promise2, promise3])\nallPromise\n  .then(console.log) // 모든 promise를 이행한뒤 출력\n  .catch(console.error)\n// [ &#39;첫번째&#39;, &#39;두번째&#39;, &#39;세번째&#39;]</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">// Promise.rece\n\nconst promise1 = new Promise((resolve, reject) =&gt;\n  setTimeout(reject, 3000, &#39;첫번째&#39;),\n)\n\nconst promise2 = new Promise((resolve) =&gt; setTimeout(resolve(&#39;두번째&#39;), 2000))\n\nconst promise3 = new Promise((resolve) =&gt; setTimeout(resolve(&#39;세번째&#39;), 1000))\n\nconst recePromise = Promise.race([promise1, promise2, promise3])\n\nrecePromise\n  .then(console.log) // 가장 먼저 끝난 세번째만 반환하고 종료\n  .catch(console.error) // 첫번째가 이행되지 않아서 오류발생안함\n// [ &#39;세번째&#39;]</code>\n        </deckgo-highlight-code>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/functional-es6\" target=\"_blank\" rel=\"nofollow\">함수형 프로그래밍과 JavaScript ES6+</a></li>\n</ul>","frontmatter":{"title":"비동기를 값으로 다루는 Promise","date":"Oct 27, 2021","update":null,"tags":["javascript"]}}}]},"site":{"siteMetadata":{"comment":{"utterances":"devKumas/kumas.dev"}}}},"pageContext":{"slug":"/posts/js/async-promise/"}},"staticQueryHashes":["196858978","2544702736","3159585216"]}