{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/react/react-type/","result":{"data":{"posts":{"edges":[{"node":{"id":"2f7fa5c6-0ebb-541a-8fb5-02c163895963","html":"<h2>Function? Class?</h2>\n<p>리액트는 함수형 컴포넌트(Functional Component)와 클래스형 컴포넌트(Class Component)로 나누어집니다. 함수형 컴포넌트로 작성 시에 코드가 매우 짧아지게 되는데, 알아보도록 하겠습니다.</p>\n<h3>클래스형 컴포넌트</h3>\n<ul>\n<li>state기능 및 라이프사이클 기능을 사용할 수 있고 임의 메서드를 정의할 수 있다.</li>\n<li>render 함수가 꼭 있어야 하고, 그 안에서 보여 주어야 할 jsx를 반환해야 한다</li>\n</ul>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">import React from &#39;react&#39;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      first: Math.ceil(Math.random() * 9),\n      second: Math.ceil(Math.random() * 9),\n      value: &#39;&#39;,\n      result: &#39;&#39;,\n    }\n  }\n\n  onSubmit = () =&gt; {\n    e.preventDefault()\n    if (parseInt(this.state.value) === this.state.first * this.state.second) {\n      this.setState((prevState) =&gt; {\n        return {\n          result: `정답: ${prevState.value}`,\n          first: Math.ceil(Math.random() * 9),\n          second: Math.ceil(Math.random() * 9),\n          value: &#39;&#39;,\n        }\n      })\n    } else {\n      this.setState({\n        result: &#39;땡&#39;,\n        value: &#39;&#39;,\n      })\n    }\n    this.input.focus()\n  }\n\n  onChange = (e) =&gt; this.setState({ value: e.target.value })\n\n  render() {\n    return (\n      &lt;React.Fragment&gt;\n        &lt;div&gt;\n          {this.state.first} 곱하기 {this.state.second}는?\n        &lt;/div&gt;\n        &lt;form onSubmit={this.onSubmit}&gt;\n          &lt;input\n            ref={(c) =&gt; {\n              this.input = c\n            }}\n            type=&quot;number&quot;\n            value={this.state.value}\n            onChange={this.onChange}\n          /&gt;\n          &lt;button&gt;입력!&lt;/button&gt;\n          &lt;div&gt;{this.state.result}&lt;/div&gt;\n        &lt;/form&gt;\n      &lt;/React.Fragment&gt;\n    )\n  }\n}</code>\n        </deckgo-highlight-code>\n<h3>함수형 컴포넌트</h3>\n<ul>\n<li>선언하기가 간편하다.</li>\n<li>메모리가 클래스형 컴포넌트보다 덜 사용한다.</li>\n</ul>\n<deckgo-highlight-code language=\"jsx\" terminal=\"carbon\" theme=\"seti\"  >\n          <code slot=\"code\">import React,{useState, useRef} from &#39;react&#39;;\n\nclass App extends React.Component {\n  const [first, setFirst] = useState(Math.ceil(Math.random() * 9));\n  const [second, setSecond] = useState(Math.ceil(Math.random() * 9));\n  const [value, setValue] = useState(&#39;&#39;);\n  const [result, setResult] = useState(&#39;&#39;);\n  const inputEl = useRef(null);\n\n  const onSubmitForm = (e) =&gt; {\n    e.preventDefault();\n    if (parseInt(value) === first * second) {\n      setResult(&#39;정답&#39;);\n      setFirst(Math.ceil(Math.random() * 9));\n      setSecond(Math.ceil(Math.random() * 9));\n      setValue(&#39;&#39;);\n      inputEl.current.focus();\n    } else {\n      setResult(&#39;땡&#39;);\n      setValue(&#39;&#39;);\n      inputEl.current.focus();\n    }\n  };\n  return (\n    &lt;&gt;\n      &lt;div&gt;{first} 곱하기 {second}는?&lt;/div&gt;\n      &lt;form onSubmit={onSubmitForm}&gt;\n        &lt;input\n          ref={inputEl}\n          type=&quot;number&quot;\n          value={value}\n          onChange={(e) =&gt; setValue(e.target.value)}\n        /&gt;\n        &lt;button&gt;입력!&lt;/button&gt;\n      &lt;/form&gt;\n      &lt;div id=&quot;result&quot;&gt;{result}&lt;/div&gt;\n    &lt;/&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>다음과 같이, 같은 코드를 작성하더라도 함수형 컴포넌트로 작성 시에 코드량이 매우 줄어드는 것을 알 수 있습니다. 그리고 React의 공식문서에서도 가능하다면 함수형 컴포넌트와 Hook을 사용하기를 권장하고 있으니, 특별한 이유가 있지 않다면 함수형 컴포넌트로 작성하시면 되겠습니다.</p>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/web-game-react\" target=\"_blank\" rel=\"nofollow\">웹 게임을 만들며 배우는 React</a></li>\n</ul>","timeToRead":2,"frontmatter":{"title":"React의 종류","date":"Sep 14, 2021","update":null,"tags":["react"]}}}]}},"pageContext":{"slug":"/posts/react/react-type/"}},"staticQueryHashes":["196858978","3066419403","3159585216"]}