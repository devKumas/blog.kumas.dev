{"componentChunkName":"component---src-templates-post-jsx","path":"/java/spring-json/","result":{"data":{"site":{"siteMetadata":{"title":"kumas.blog"}},"markdownRemark":{"id":"70862e59-06f2-5b01-9b3c-fb4aa046c8df","excerpt":"원인 스프링 프레임워크를 사용 시에 json 객채의 경우에는 string 타입으로 변환되어 전달이 되지만 배열 객체의 경우 전달이 되지 않습니다. http 통신은 원래 문자열만 전송할 수 있기 때문에 객체의 배열의 경우 직렬화를 하여 문자열 형태로 보내주어야 합니다. 해결 방법 ajax jquery을 이용하여 ajax로 객채 배열을 직렬화 시켜 Strin…","html":"<h2>원인</h2>\n<p>스프링 프레임워크를 사용 시에 json 객채의 경우에는 string 타입으로 변환되어 전달이 되지만 배열 객체의 경우 전달이 되지 않습니다. http 통신은 원래 문자열만 전송할 수 있기 때문에 객체의 배열의 경우 직렬화를 하여 문자열 형태로 보내주어야 합니다.</p>\n<h2>해결 방법</h2>\n<h3>ajax</h3>\n<p>jquery을 이용하여 ajax로 객채 배열을 직렬화 시켜 String 타입으로 서버 측으로 전송합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Robert\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JavaScript\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> jsonData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JSON 타입으로 데이터 직렬화</span>\n<span class=\"token comment\">//\"[{\\\\\"name\\\\\":\\\\\"James\\\\\",\\\\\"age\\\\\":25,\\\\\"skill\\\\\":\\\\\"HTML\\\\\"}, ...]\"</span>\n\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getJson.do\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">jsonData</span><span class=\"token operator\">:</span> jsonData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>spring</h3>\n<p>전달된 String 타입의 문자열을 JSON 라이브러리를 이용하여 다시 JSON 타입으로 변환시켜 객체에 다시 세팅합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>sf<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>sf<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/getJson.do\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> jsonData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 직렬화 시켜 가져온 오브젝트 배열을 JSONArray 형식으로 바꿔준다.</span>\n  <span class=\"token class-name\">JSONArray</span> array <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromObject</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// JSONArray 형태의 값을 가져와 JSONObject 로 풀어준다.</span>\n    <span class=\"token class-name\">JSONObject</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setSkill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skill\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>gradle</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dependencies {\n  implementation 'net.sf.json-lib:json-lib:2.4:jdk15'\n}</code></pre></div>","frontmatter":{"title":"💠 Spring에서 JSON사용하기","date":"July 23, 2021","update":null,"tags":["spring","jquery"],"series":null},"fields":{"slug":"/java/spring-json/","readingTime":{"minutes":1.835}}},"seriesList":{"edges":[{"node":{"id":"ea7adf03-2593-5682-9135-be35d0448205","fields":{"slug":"/devops/tomcat-utf8/"},"frontmatter":{"title":"🐛 Windows Tomcat 배치파일 한글 깨짐"}}},{"node":{"id":"ad39fb8e-a9d9-560e-95ff-4e61e5b924c5","fields":{"slug":"/devops/linux-mysql57-install/"},"frontmatter":{"title":"✨ Linux MySQL 5.7 설치"}}},{"node":{"id":"0290eb09-fac1-59af-87dd-6d739d97150f","fields":{"slug":"/devops/linux-mssql2019-install/"},"frontmatter":{"title":"✨ Linux MSSQL 2019 설치"}}},{"node":{"id":"1f148619-9d1d-5db3-8b5b-e9c185e28146","fields":{"slug":"/devops/mysql-utf8/"},"frontmatter":{"title":"🐛 MySQL에서 한글 깨짐"}}},{"node":{"id":"1afbdb49-795d-52a1-9a77-132efc6f4c62","fields":{"slug":"/java/create-gradle-spring/"},"frontmatter":{"title":"🔨 Gradle으로 Spring 프로젝트 생성하기 "}}},{"node":{"id":"d9aa19ae-159d-57c2-8421-f88463d76f3c","fields":{"slug":"/devops/linux-apache-tomcat/"},"frontmatter":{"title":"✍️ Linux Apache2 + Tomcat9 연동 설치"}}},{"node":{"id":"70862e59-06f2-5b01-9b3c-fb4aa046c8df","fields":{"slug":"/java/spring-json/"},"frontmatter":{"title":"💠 Spring에서 JSON사용하기"}}},{"node":{"id":"2f7fa5c6-0ebb-541a-8fb5-02c163895963","fields":{"slug":"/react/react-type/"},"frontmatter":{"title":"🤔 React의 종류"}}},{"node":{"id":"4f14fe54-2d45-5d3e-b758-93fe467baafb","fields":{"slug":"/js/array-prototype/"},"frontmatter":{"title":"✍️ JavaScript의 Array.Prototype"}}},{"node":{"id":"cec59fe0-b80a-54f6-9b32-dddc87d7e027","fields":{"slug":"/js/first-class-function/"},"frontmatter":{"title":"⭐️ 일급함수란 무엇인가?"}}},{"node":{"id":"2bb968a1-552a-5537-95c5-39482ba54087","fields":{"slug":"/js/iterator-generator/"},"frontmatter":{"title":"🧠️ 이터레이터와 제너레이터"}}},{"node":{"id":"4e2356c9-d9c6-5cf5-845e-0245d62fe8ce","fields":{"slug":"/etc/vscode-vim/"},"frontmatter":{"title":"🕵️ VSCode에서 vim 설치 및 IM 세팅하기"}}},{"node":{"id":"54eb89e7-6b88-57fa-a7a6-187627f33e8f","fields":{"slug":"/js/async-promise/"},"frontmatter":{"title":"💥 비동기를 값으로 다루는 Promise"}}},{"node":{"id":"c37febd6-a0b3-54f5-9ed5-ca7c89e3798e","fields":{"slug":"/etc/create-hexo-blog/"},"frontmatter":{"title":"🔨 Hexo를 이용하여 깃허브 블로그 만들기"}}},{"node":{"id":"36b67444-5fee-5eb7-9611-4f74c94840de","fields":{"slug":"/etc/nodemon-config/"},"frontmatter":{"title":"🙈 Nodemon 모니터링 파일 설정하기"}}},{"node":{"id":"7d48a25c-380a-5414-8bac-5567931bddcf","fields":{"slug":"/algorithm/euclidean/"},"frontmatter":{"title":"🧠 유클리드 호제법"}}},{"node":{"id":"b8498611-1756-5447-bef6-914fe64e99b1","fields":{"slug":"/algorithm/transpose/"},"frontmatter":{"title":"🧠 이차원 배열 행과 열 바꾸기"}}},{"node":{"id":"3031062b-de7d-5e8f-932a-04afb43df356","fields":{"slug":"/algorithm/baekjoon-init/"},"frontmatter":{"title":"🙈 백준 문제풀이 세팅 (Node.js)"}}},{"node":{"id":"7d4a9cd8-53db-5de2-a0b2-9444f52d6006","fields":{"slug":"/etc/mac-hammerspoon/"},"frontmatter":{"title":"👌 macOS 한영 전환 단축키 변경하기 (M1)"}}},{"node":{"id":"5655af8e-c2f2-5a7e-a4d7-872a28028473","fields":{"slug":"/web/http-status-code/"},"frontmatter":{"title":"🌐️ HTTP의 상태코드의 종류와 의미"}}},{"node":{"id":"d6925038-69c1-58de-bfb5-a8b15319b211","fields":{"slug":"/web/good-api-uri/"},"frontmatter":{"title":"🔥️ 좋은 API URI 설계하기"}}}]},"previous":{"fields":{"slug":"/devops/linux-apache-tomcat/"},"frontmatter":{"title":"✍️ Linux Apache2 + Tomcat9 연동 설치"}},"next":{"fields":{"slug":"/react/react-type/"},"frontmatter":{"title":"🤔 React의 종류"}}},"pageContext":{"id":"70862e59-06f2-5b01-9b3c-fb4aa046c8df","series":null,"previousPostId":"d9aa19ae-159d-57c2-8421-f88463d76f3c","nextPostId":"2f7fa5c6-0ebb-541a-8fb5-02c163895963"}},"staticQueryHashes":[]}