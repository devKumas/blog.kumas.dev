{"componentChunkName":"component---src-templates-post-jsx","path":"/java/spring-json/","result":{"data":{"site":{"siteMetadata":{"title":"kumas.blog"}},"markdownRemark":{"id":"67ec4e10-d785-5af1-9e59-c8ba386a6e5a","excerpt":"원인 스프링 프레임워크를 사용 시에 json 객채의 경우에는 string 타입으로 변환되어 전달이 되지만 배열 객체의 경우 전달이 되지 않습니다. http 통신은 원래 문자열만 전송할 수 있기 때문에 객체의 배열의 경우 직렬화를 하여 문자열 형태로 보내주어야 합니다. 해결 방법 ajax jquery을 이용하여 ajax로 객채 배열을 직렬화 시켜 Strin…","html":"<h2>원인</h2>\n<p>스프링 프레임워크를 사용 시에 json 객채의 경우에는 string 타입으로 변환되어 전달이 되지만 배열 객체의 경우 전달이 되지 않습니다. http 통신은 원래 문자열만 전송할 수 있기 때문에 객체의 배열의 경우 직렬화를 하여 문자열 형태로 보내주어야 합니다.</p>\n<h2>해결 방법</h2>\n<h3>ajax</h3>\n<p>jquery을 이용하여 ajax로 객채 배열을 직렬화 시켜 String 타입으로 서버 측으로 전송합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HTML\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CSS\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Robert\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">skill</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JavaScript\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> jsonData <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JSON 타입으로 데이터 직렬화</span>\n<span class=\"token comment\">//\"[{\\\\\"name\\\\\":\\\\\"James\\\\\",\\\\\"age\\\\\":25,\\\\\"skill\\\\\":\\\\\"HTML\\\\\"}, ...]\"</span>\n\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"getJson.do\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">jsonData</span><span class=\"token operator\">:</span> jsonData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>spring</h3>\n<p>전달된 String 타입의 문자열을 JSON 라이브러리를 이용하여 다시 JSON 타입으로 변환시켜 객체에 다시 세팅합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>sf<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>sf<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/getJson.do\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">String</span> jsonData<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 직렬화 시켜 가져온 오브젝트 배열을 JSONArray 형식으로 바꿔준다.</span>\n  <span class=\"token class-name\">JSONArray</span> array <span class=\"token operator\">=</span> <span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromObject</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// JSONArray 형태의 값을 가져와 JSONObject 로 풀어준다.</span>\n    <span class=\"token class-name\">JSONObject</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    person<span class=\"token punctuation\">.</span><span class=\"token function\">setSkill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skill\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>gradle</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dependencies {\n  implementation 'net.sf.json-lib:json-lib:2.4:jdk15'\n}</code></pre></div>","frontmatter":{"title":"💠 Spring에서 JSON사용하기","date":"July 23, 2021","update":null,"tags":["spring","jquery"],"series":null},"fields":{"slug":"/java/spring-json/","readingTime":{"minutes":1.835}}},"seriesList":{"edges":[{"node":{"id":"468e65ec-2387-58da-913a-09474de5c6f6","fields":{"slug":"/devops/tomcat-utf8/"},"frontmatter":{"title":"🐛 Windows Tomcat 배치파일 한글 깨짐"}}},{"node":{"id":"2f1de6a4-eec9-5b04-86fd-35a5c6eb6a66","fields":{"slug":"/devops/linux-mysql57-install/"},"frontmatter":{"title":"✨ Linux MySQL 5.7 설치"}}},{"node":{"id":"c1aac2ba-29f7-5cac-a34f-7b1b1dd889ce","fields":{"slug":"/devops/linux-mssql2019-install/"},"frontmatter":{"title":"✨ Linux MSSQL 2019 설치"}}},{"node":{"id":"c3897eb4-4eec-5335-aebc-0eba249747c2","fields":{"slug":"/java/create-gradle-spring/"},"frontmatter":{"title":"🔨 Gradle으로 Spring 프로젝트 생성하기 "}}},{"node":{"id":"e8945362-e46d-50b9-a3d9-018e2257a205","fields":{"slug":"/devops/mysql-utf8/"},"frontmatter":{"title":"🐛 MySQL에서 한글 깨짐"}}},{"node":{"id":"63d58e22-07c7-598c-a4b3-848b4f1bfc70","fields":{"slug":"/devops/linux-apache-tomcat/"},"frontmatter":{"title":"✍️ Linux Apache2 + Tomcat9 연동 설치"}}},{"node":{"id":"67ec4e10-d785-5af1-9e59-c8ba386a6e5a","fields":{"slug":"/java/spring-json/"},"frontmatter":{"title":"💠 Spring에서 JSON사용하기"}}},{"node":{"id":"768321d9-ca06-5946-ad0e-61289f580192","fields":{"slug":"/react/react-type/"},"frontmatter":{"title":"🤔 React의 종류"}}},{"node":{"id":"5f8ee066-3b5e-559b-a8b9-9f8529f00469","fields":{"slug":"/js/array-prototype/"},"frontmatter":{"title":"✍️ JavaScript의 Array.Prototype"}}},{"node":{"id":"d6135bc8-38eb-5e7e-9664-bfda912458d5","fields":{"slug":"/js/iterator-generator/"},"frontmatter":{"title":"🧠️ 이터레이터와 제너레이터"}}},{"node":{"id":"087dc647-ac48-569d-a0c1-46e278232d03","fields":{"slug":"/js/first-class-function/"},"frontmatter":{"title":"⭐️ 일급함수란 무엇인가?"}}},{"node":{"id":"0311e506-5512-5221-9967-d27b73b5909c","fields":{"slug":"/etc/vscode-vim/"},"frontmatter":{"title":"🕵️ VSCode에서 vim 설치 및 IM 세팅하기"}}},{"node":{"id":"1f48caee-ad1d-57d2-a64a-88a7f859f5c1","fields":{"slug":"/js/async-promise/"},"frontmatter":{"title":"💥 비동기를 값으로 다루는 Promise"}}},{"node":{"id":"5c9e1bdb-c04a-5af2-8265-3a22a86e9467","fields":{"slug":"/etc/nodemon-config/"},"frontmatter":{"title":"🙈 Nodemon 모니터링 파일 설정하기"}}},{"node":{"id":"32fc4c7d-620e-5ef2-898d-7b0bf001e3a7","fields":{"slug":"/etc/create-hexo-blog/"},"frontmatter":{"title":"🔨 Hexo를 이용하여 깃허브 블로그 만들기"}}},{"node":{"id":"20cbd59a-310c-5be9-8a11-ddcfd5200b8d","fields":{"slug":"/algorithm/transpose/"},"frontmatter":{"title":"🧠 이차원 배열 행과 열 바꾸기"}}},{"node":{"id":"4ff6b13a-1797-55a6-9ef8-52a0d93a9bfa","fields":{"slug":"/algorithm/euclidean/"},"frontmatter":{"title":"🧠 유클리드 호제법"}}},{"node":{"id":"e5fd4d94-96c5-5391-90d6-4c36e6a64f45","fields":{"slug":"/algorithm/baekjoon-init/"},"frontmatter":{"title":"🙈 백준 문제풀이 세팅 (Node.js)"}}},{"node":{"id":"05740fad-9c04-54be-91d1-36086c252a90","fields":{"slug":"/etc/mac-hammerspoon/"},"frontmatter":{"title":"👌 macOS 한영 전환 단축키 변경하기 (M1)"}}},{"node":{"id":"ba4d1746-3dc8-52e4-aba1-ffdf3e02016b","fields":{"slug":"/web/http-status-code/"},"frontmatter":{"title":"🌐️ HTTP의 상태코드의 종류와 의미"}}},{"node":{"id":"0ed1aa55-3ff8-575b-83f9-adae90caae76","fields":{"slug":"/web/good-api-uri/"},"frontmatter":{"title":"🔥️ 좋은 API URI 설계하기"}}}]},"previous":{"fields":{"slug":"/devops/linux-apache-tomcat/"},"frontmatter":{"title":"✍️ Linux Apache2 + Tomcat9 연동 설치"}},"next":{"fields":{"slug":"/react/react-type/"},"frontmatter":{"title":"🤔 React의 종류"}}},"pageContext":{"id":"67ec4e10-d785-5af1-9e59-c8ba386a6e5a","series":null,"previousPostId":"63d58e22-07c7-598c-a4b3-848b4f1bfc70","nextPostId":"768321d9-ca06-5946-ad0e-61289f580192"}},"staticQueryHashes":[]}