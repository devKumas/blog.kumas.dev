{"componentChunkName":"component---src-templates-post-jsx","path":"/js/iterator-generator/","result":{"data":{"site":{"siteMetadata":{"title":"kumas.blog"}},"markdownRemark":{"id":"d693ce17-cb7a-5a26-a0b9-29ce499af342","excerpt":"이터레이터와 제너레이터 ES6에서 추가된 이터레이터(iterator)와 제너레이터(generator)를 많이 들어 보았는데 어떻게 쓸 수 있는지 알아보도록 하겠습니다. 이터레이터 이터러블 객체의 Symbol.iterator 메서드를 호출하면 반환되는 이터레이터는 반복을 위해 설계된 인터페이스 객체이며 {value, done}을 가지며 next의 메서드를 …","html":"<h2>이터레이터와 제너레이터</h2>\n<p>ES6에서 추가된 이터레이터(iterator)와 제너레이터(generator)를 많이 들어 보았는데 어떻게 쓸 수 있는지 알아보도록 하겠습니다.</p>\n<h3>이터레이터</h3>\n<p>이터러블 객체의 Symbol.iterator 메서드를 호출하면 반환되는 이터레이터는 반복을 위해 설계된 인터페이스 객체이며 {value, done}을 가지며 next의 메서드를 가지고 있습니다.</p>\n<h3>순차적 접근</h3>\n<p>for... of은 이터레이터 객체의 done 값이 true가 될 때까지 반복하며 value을 출력해 주는 방식입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span>\n\n<span class=\"token comment\">// 인덱스 방식으로 접근하지 않기 때문에 set, map에iter.next(); // 1서도 사용가능</span>\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> set<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span>\n\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a b c</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 1] ['b', 2] ['c', 3]</span></code></pre></div>\n<h3>메서드 호출</h3>\n<p>배열의 인덱스를 순회하는 것이 아닌 이터레이터의 next 메서드를 이용하는 것이기 때문에 이런 식으로도 사용이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iter <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Symbol.iterator을 호출하여 반환된 이터레이터를 할당</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 1, done: false};</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 2, done: false};</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 3, done: false};</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: undefined, done: true};</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: undefined, done: true};</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: undefined, done: true};</span></code></pre></div>\n<h3>커스텀 이터레이터</h3>\n<p>이터레이터만 있다면 for.. of을 사용할 수 있는 특징을 이용하여 임의의 이터레이터를 작성하는 것도 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 호출할수 있는 이터레이터 메서드 작성</span>\n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// next 메서드 작성</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n          <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">vlaue</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// next 호출 후에도 자기 자신을 반환하도록</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iterable<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 2 1</span></code></pre></div>\n<h3>제너레이터</h3>\n<p>위의 방식으로 커스텀 이터레이터를 만들 수도 있지만 제너레이터를 이용한다면 보다 쉽게 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">iterable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> iter <span class=\"token operator\">=</span> <span class=\"token function\">iterable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 0, done: false};</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 1, done: false};</span>\niter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 2, done: false};</span>\n\n<span class=\"token keyword\">const</span> iter2 <span class=\"token operator\">=</span> <span class=\"token function\">iterable</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 제너레이터에 매개변수 전달</span>\niter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 10, done: false};</span>\niter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 11, done: false};</span>\niter2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {value: 12, done: false};</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> a <span class=\"token keyword\">of</span> iter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 이터레이터가 존재하기 때문에 for of 문도 사용이 가능합니다.</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 4 5 .... 100</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>제너레이터는 function* 의 이름으로 함수를 생성하면 됩니다. 그리고 일반 function 이였다면 무한히 돌아가는 while으로 스크립트가 멈추었겠지만, yield라는 키워드로 독특하게 함수가 실행 되게 됩니다.</p>\n<p>제너레이트 함수의 yield는 호출을 할 때마다 해당하는 지점에서 작동을 중지하고 변수를 기억합니다. 또한 return 통해서 종료 시점을 제어할 수도 있습니다.</p>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/functional-es6\">함수형 프로그래밍과 JavaScript ES6+</a></li>\n</ul>","frontmatter":{"title":"🧠️ 이터레이터와 제너레이터","date":"September 25, 2021","update":null,"tags":["javascript","es6+"],"series":null},"fields":{"slug":"/js/iterator-generator/","readingTime":{"minutes":4.3}}},"seriesList":{"edges":[{"node":{"id":"af860d50-0eea-5340-8c23-5fe24a21c0a2","fields":{"slug":"/devops/tomcat-utf8/"},"frontmatter":{"title":"🐛 Windows Tomcat 배치파일 한글 깨짐"}}},{"node":{"id":"df596d5b-a9fd-512a-a4d4-9f709c4771b8","fields":{"slug":"/devops/linux-mysql57-install/"},"frontmatter":{"title":"✨ Linux MySQL 5.7 설치"}}},{"node":{"id":"8165195b-b56b-565f-81db-198f08d93769","fields":{"slug":"/devops/linux-mssql2019-install/"},"frontmatter":{"title":"✨ Linux MSSQL 2019 설치"}}},{"node":{"id":"3477da01-2466-5baa-b5b9-9b825bbd7423","fields":{"slug":"/java/create-gradle-spring/"},"frontmatter":{"title":"🔨 Gradle으로 Spring 프로젝트 생성하기 "}}},{"node":{"id":"4bec45f7-b013-5a45-a67b-9501379877b4","fields":{"slug":"/devops/mysql-utf8/"},"frontmatter":{"title":"🐛 MySQL에서 한글 깨짐"}}},{"node":{"id":"653cfcad-f394-544b-9af8-4e97e8562495","fields":{"slug":"/devops/linux-apache-tomcat/"},"frontmatter":{"title":"✍️ Linux Apache2 + Tomcat9 연동 설치"}}},{"node":{"id":"1cc1ecc7-50a2-53f0-b68e-31e41a90d050","fields":{"slug":"/java/spring-json/"},"frontmatter":{"title":"💠 Spring에서 JSON사용하기"}}},{"node":{"id":"97d07622-15f3-5ded-8873-4c019acbf2d6","fields":{"slug":"/react/react-type/"},"frontmatter":{"title":"🤔 React의 종류"}}},{"node":{"id":"44be48f6-137f-5e44-9195-b08bf6136ec6","fields":{"slug":"/js/array-prototype/"},"frontmatter":{"title":"✍️ JavaScript의 Array.Prototype"}}},{"node":{"id":"d693ce17-cb7a-5a26-a0b9-29ce499af342","fields":{"slug":"/js/iterator-generator/"},"frontmatter":{"title":"🧠️ 이터레이터와 제너레이터"}}},{"node":{"id":"c4279a6d-f1a9-54d4-ab15-1972d8ad3c2b","fields":{"slug":"/js/first-class-function/"},"frontmatter":{"title":"⭐️ 일급함수란 무엇인가?"}}},{"node":{"id":"a0161075-e6dd-5bd7-b4bf-1193ac48e653","fields":{"slug":"/etc/vscode-vim/"},"frontmatter":{"title":"🕵️ VSCode에서 vim 설치 및 IM 세팅하기"}}},{"node":{"id":"41101c68-041b-54d1-8df5-d2dbf85d27f8","fields":{"slug":"/js/async-promise/"},"frontmatter":{"title":"💥 비동기를 값으로 다루는 Promise"}}},{"node":{"id":"73fe6c92-d3a0-5317-90d8-1d3697814a13","fields":{"slug":"/etc/nodemon-config/"},"frontmatter":{"title":"🙈 Nodemon 모니터링 파일 설정하기"}}},{"node":{"id":"aa7514c9-8887-5224-8e64-1d08b6245685","fields":{"slug":"/etc/create-hexo-blog/"},"frontmatter":{"title":"🔨 Hexo를 이용하여 깃허브 블로그 만들기"}}},{"node":{"id":"12f4978c-dec8-578a-9803-2a3bab966ce1","fields":{"slug":"/algorithm/transpose/"},"frontmatter":{"title":"🧠 이차원 배열 행과 열 바꾸기"}}},{"node":{"id":"698c5727-9a8c-552c-96a1-5a96c654ecc6","fields":{"slug":"/algorithm/euclidean/"},"frontmatter":{"title":"🧠 유클리드 호제법"}}},{"node":{"id":"822bdf50-8874-5357-8717-336d5bc8af55","fields":{"slug":"/algorithm/baekjoon-init/"},"frontmatter":{"title":"🙈 백준 문제풀이 세팅 (Node.js)"}}},{"node":{"id":"5711924a-0baf-5460-a3a2-015f5aed7679","fields":{"slug":"/etc/mac-hammerspoon/"},"frontmatter":{"title":"👌 macOS 한영 전환 단축키 변경하기 (M1)"}}},{"node":{"id":"d0894c86-50ab-5b41-9786-8f72ae6f38a2","fields":{"slug":"/web/http-status-code/"},"frontmatter":{"title":"🌐️ HTTP의 상태코드의 종류와 의미"}}},{"node":{"id":"ec648d5e-33a0-54ee-9143-2a7940f37ddc","fields":{"slug":"/web/good-api-uri/"},"frontmatter":{"title":"🔥️ 좋은 API URI 설계하기"}}}]},"previous":{"fields":{"slug":"/js/array-prototype/"},"frontmatter":{"title":"✍️ JavaScript의 Array.Prototype"}},"next":{"fields":{"slug":"/js/first-class-function/"},"frontmatter":{"title":"⭐️ 일급함수란 무엇인가?"}}},"pageContext":{"id":"d693ce17-cb7a-5a26-a0b9-29ce499af342","series":null,"previousPostId":"44be48f6-137f-5e44-9195-b08bf6136ec6","nextPostId":"c4279a6d-f1a9-54d4-ab15-1972d8ad3c2b"}},"staticQueryHashes":[]}