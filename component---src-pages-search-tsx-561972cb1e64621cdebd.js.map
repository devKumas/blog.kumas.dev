{"version":3,"file":"component---src-pages-search-tsx-561972cb1e64621cdebd.js","mappings":"mIA2CA,IAvCmD,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACpD,OACEC,EAAAA,cAAAA,EAAAA,SAAAA,KACGD,aADH,EACGA,EAAOE,KACN,oBACEC,KACEC,EAFJ,EAEIA,GACAC,EAHJ,EAGIA,QACUC,EAJd,EAIIC,OAAUD,KAJd,IAKIE,YAAeC,EALnB,EAKmBA,MAAOC,EAL1B,EAK0BA,KAAMC,EALhC,EAKgCA,OAAQC,EALxC,EAKwCA,KALxC,OAQEX,EAAAA,cAAAA,UAAAA,CACEY,IAAKT,EACLU,UAAU,iEAEVb,EAAAA,cAACc,EAAAA,KAAD,CAAMC,GAAIV,GACRL,EAAAA,cAAAA,KAAAA,CAAIa,UAAU,qBAAqBL,GACnCR,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,oCACbb,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,OAAAA,CAAMY,IAAKT,GAAKM,GACfC,GAAUV,EAAAA,cAAAA,OAAAA,KAAAA,cAAqBU,EAArB,MAEbV,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,6BACZF,GACCA,EAAKV,KAAI,SAACe,EAAKC,GAAN,OACPjB,EAAAA,cAAAA,OAAAA,CAAMa,UAAU,OAAOD,IAAKK,GAA5B,IAAwCD,QAIhDhB,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,8BAA8BT,W,iFCwE3D,UA/F+C,SAAC,GAAc,IACpDL,EADmD,EAAXmB,KACzBC,kBAAfpB,MAER,GAA0BqB,EAAAA,EAAAA,UAAS,IAA5BC,EAAP,KAAcC,EAAd,KACA,GAAsCF,EAAAA,EAAAA,WAAS,GAAxCG,EAAP,KAAoBC,EAApB,KAEMC,GAAgBC,EAAAA,EAAAA,UACpB,kBACE3B,EAAM4B,QACJ,oBACEzB,KACiBM,EAFnB,EAEID,YAAeC,MACfoB,EAHJ,EAGIA,gBAHJ,OAME,IAAIC,OAAJ,GAAcR,EAAS,KAAKS,KAC1BP,EAAcf,EAAQA,EAAQoB,QAGtC,CAACP,EAAOE,IAGV,OACEvB,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAC+B,EAAAA,EAAD,MACA/B,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,uDACbb,EAAAA,cAACgC,EAAAA,EAAD,CAAIC,KAAMC,EAAAA,MACVlC,EAAAA,cAAAA,QAAAA,CACEa,UAAU,sBACVsB,KAAK,OACLd,MAAOA,EACPe,YAAY,SACZC,aAAa,MACbC,WAAS,EACTC,SAAU,SAACC,GAAD,OAAOlB,EAASkB,EAAEC,cAAcpB,UAE5CrB,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,WACbb,EAAAA,cAAAA,OAAAA,CACEa,WACEU,EAAc,gBAAkB,IADzB,uBAGTmB,QAAS,kBAAMlB,GAAe,KAJhC,YAQAxB,EAAAA,cAAAA,OAAAA,CACEa,WACGU,EAAgC,GAAlB,iBADR,uBAGTmB,QAAS,kBAAMlB,GAAe,KAJhC,sBAWO,KAAVH,GAAiBI,EAAckB,OAG9B3C,EAAAA,cAAC4C,EAAAA,EAAD,CAAU7C,MAAiB,KAAVsB,EAAetB,EAAQ0B,IAFxCzB,EAAAA,cAAAA,OAAAA,KAAAA","sources":["webpack://kumas.dev/./src/components/PostList.tsx","webpack://kumas.dev/./src/pages/search.tsx"],"sourcesContent":["import { Link } from 'gatsby'\nimport React, { FunctionComponent } from 'react'\nimport { PostListProps } from 'types'\n\nconst PostList: FunctionComponent<PostListProps> = ({ edges }) => {\n  return (\n    <>\n      {edges?.map(\n        ({\n          node: {\n            id,\n            excerpt,\n            fields: { slug },\n            frontmatter: { title, date, update, tags },\n          },\n        }) => (\n          <article\n            key={id}\n            className=\"mb-8 p-4 hover:opacity-100 transition duration-500 opacity-80\"\n          >\n            <Link to={slug}>\n              <h2 className=\"text-xl font-bold\">{title}</h2>\n              <div className=\"flex text-xs text-gray-500 my-2 \">\n                <div>\n                  <span key={id}>{date}</span>\n                  {update && <span>{` (Updated: ${update})`}</span>}\n                </div>\n                <div className=\"before:content-['Â·'] mx-1\">\n                  {tags &&\n                    tags.map((tag, index) => (\n                      <span className=\"mx-1\" key={index}>{`#${tag}`}</span>\n                    ))}\n                </div>\n              </div>\n              <div className=\"text-gray-700 line-clamp-3\">{excerpt}</div>\n            </Link>\n          </article>\n        ),\n      )}\n    </>\n  )\n}\n\nexport default PostList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { FunctionComponent, useState, useMemo } from 'react'\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nimport { graphql } from 'gatsby'\nimport PostList from 'components/PostList'\nimport Head from 'components/Head'\nimport { SearchProps } from '../types'\n\nconst Search: FunctionComponent<SearchProps> = ({ data }) => {\n  const { edges } = data.allMarkdownRemark\n\n  const [value, setValue] = useState('')\n  const [isTitleOnly, setIsTitleOnly] = useState(true)\n\n  const filteredPosts = useMemo(\n    () =>\n      edges.filter(\n        ({\n          node: {\n            frontmatter: { title },\n            rawMarkdownBody,\n          },\n        }) =>\n          new RegExp(`${value}`, 'i').test(\n            isTitleOnly ? title : title + rawMarkdownBody,\n          ),\n      ),\n    [value, isTitleOnly],\n  )\n\n  return (\n    <>\n      <Head />\n      <div>\n        <div>\n          <div className=\"my-8 flex justify-center items-center text-gray-300\">\n            <Fa icon={faSearch} />\n            <input\n              className=\"mx-2 text-gray-900 \"\n              type=\"text\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e) => setValue(e.currentTarget.value)}\n            />\n            <div className=\"text-sm\">\n              <span\n                className={`${\n                  isTitleOnly ? 'text-gray-900' : ''\n                } mx-2 cursor-pointer`}\n                onClick={() => setIsTitleOnly(true)}\n              >\n                in Title\n              </span>\n              <span\n                className={`${\n                  !isTitleOnly ? 'text-gray-900' : ''\n                } mx-2 cursor-pointer`}\n                onClick={() => setIsTitleOnly(false)}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? (\n            <span>No search results</span>\n          ) : (\n            <PostList edges={value === '' ? edges : filteredPosts} />\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { slug: { regex: \"/^/[a-zA-Z]/\" } } }\n    ) {\n      edges {\n        node {\n          rawMarkdownBody\n          id\n          excerpt(pruneLength: 200, truncate: true)\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            update(formatString: \"DD MMMM, YYYY\")\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Search\n"],"names":["edges","React","map","node","id","excerpt","slug","fields","frontmatter","title","date","update","tags","key","className","Link","to","tag","index","data","allMarkdownRemark","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","useMemo","filter","rawMarkdownBody","RegExp","test","Head","Fa","icon","faSearch","type","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","onClick","length","PostList"],"sourceRoot":""}