{"version":3,"file":"component---src-pages-tags-tsx-01ba34bb963900b4315e.js","mappings":"mIA2CA,IAvCmD,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACpD,OACEC,EAAAA,cAAAA,EAAAA,SAAAA,KACGD,aADH,EACGA,EAAOE,KACN,oBACEC,KACEC,EAFJ,EAEIA,GACAC,EAHJ,EAGIA,QACUC,EAJd,EAIIC,OAAUD,KAJd,IAKIE,YAAeC,EALnB,EAKmBA,MAAOC,EAL1B,EAK0BA,KAAMC,EALhC,EAKgCA,OAAQC,EALxC,EAKwCA,KALxC,OAQEX,EAAAA,cAAAA,UAAAA,CACEY,IAAKT,EACLU,UAAU,iEAEVb,EAAAA,cAACc,EAAAA,KAAD,CAAMC,GAAIV,GACRL,EAAAA,cAAAA,KAAAA,CAAIa,UAAU,qBAAqBL,GACnCR,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,oCACbb,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,OAAAA,CAAMY,IAAKT,GAAKM,GACfC,GAAUV,EAAAA,cAAAA,OAAAA,KAAAA,cAAqBU,EAArB,MAEbV,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,6BACZF,GACCA,EAAKV,KAAI,SAACe,EAAKC,GAAN,OACPjB,EAAAA,cAAAA,OAAAA,CAAMa,UAAU,OAAOD,IAAKK,GAA5B,IAAwCD,QAIhDhB,EAAAA,cAAAA,MAAAA,CAAKa,UAAU,8BAA8BT,W,8DC4C3D,UAtE2C,SAAC,GAIrC,IAFkBc,EAEnB,EAHJC,KACEC,kBAAqBF,MAGvB,GAAkCG,EAAAA,EAAAA,UAAS,IAApCC,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACdD,EAAY,UAACE,SAASC,KAAKC,MAAM,KAAK,UAA1B,QAAgCT,EAAM,GAAGU,cACpD,IAEH,IAAMC,GAAWC,EAAAA,EAAAA,UACf,kCAAMZ,EAAMa,QAAO,SAACC,GAAD,OAAOA,EAAEJ,aAAeN,KAAW,UAAtD,aAAMW,EAAoDlC,QAC1D,CAACuB,IAGH,OACEtB,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACkC,EAAAA,EAAD,MACAlC,EAAAA,cAAAA,KAAAA,CAAIa,UAAU,sCACXK,EAAMjB,KAAI,SAAC+B,GAAD,OACThC,EAAAA,cAAAA,KAAAA,CAAIa,UAAU,OAAOD,IAAKoB,EAAEJ,YAC1B5B,EAAAA,cAAAA,OAAAA,CACEa,UAAS,2BACPmB,EAAEJ,aAAeN,EACb,8BACA,iBAHG,4CAKTa,QAAS,kBAAMZ,EAAaS,EAAEJ,cAE9B5B,EAAAA,cAAAA,IAAAA,CAAGoC,KAAI,IAAMJ,EAAEJ,YAAeI,EAAEJ,kBAMxC5B,EAAAA,cAACqC,EAAAA,EAAD,CAAUtC,MAAO8B","sources":["webpack://kumas.dev/./src/components/PostList.tsx","webpack://kumas.dev/./src/pages/tags.tsx"],"sourcesContent":["import { Link } from 'gatsby'\nimport React, { FunctionComponent } from 'react'\nimport { PostListProps } from 'types'\n\nconst PostList: FunctionComponent<PostListProps> = ({ edges }) => {\n  return (\n    <>\n      {edges?.map(\n        ({\n          node: {\n            id,\n            excerpt,\n            fields: { slug },\n            frontmatter: { title, date, update, tags },\n          },\n        }) => (\n          <article\n            key={id}\n            className=\"mb-8 p-4 hover:opacity-100 transition duration-500 opacity-80\"\n          >\n            <Link to={slug}>\n              <h2 className=\"text-xl font-bold\">{title}</h2>\n              <div className=\"flex text-xs text-gray-500 my-2 \">\n                <div>\n                  <span key={id}>{date}</span>\n                  {update && <span>{` (Updated: ${update})`}</span>}\n                </div>\n                <div className=\"before:content-['Â·'] mx-1\">\n                  {tags &&\n                    tags.map((tag, index) => (\n                      <span className=\"mx-1\" key={index}>{`#${tag}`}</span>\n                    ))}\n                </div>\n              </div>\n              <div className=\"text-gray-700 line-clamp-3\">{excerpt}</div>\n            </Link>\n          </article>\n        ),\n      )}\n    </>\n  )\n}\n\nexport default PostList\n","import React, { FunctionComponent, useEffect, useMemo } from 'react'\nimport { useState } from 'react'\nimport { graphql } from 'gatsby'\n\nimport PostList from 'components/PostList'\nimport Head from 'components/Head'\nimport { TagsProps } from '../types'\n\nconst Tags: FunctionComponent<TagsProps> = ({\n  data: {\n    allMarkdownRemark: { group },\n  },\n}) => {\n  const [targetTag, setTargetTag] = useState('')\n\n  useEffect(() => {\n    setTargetTag(location.hash.split('#')[1] ?? group[0].fieldValue)\n  }, [])\n\n  const tagPosts = useMemo(\n    () => group.filter((g) => g.fieldValue === targetTag)[0]?.edges,\n    [targetTag],\n  )\n\n  return (\n    <>\n      <Head />\n      <ul className=\"mb-8 flex flex-wrap justify-center\">\n        {group.map((g) => (\n          <li className=\"mx-3\" key={g.fieldValue}>\n            <span\n              className={`cursor-pointer text-sm ${\n                g.fieldValue === targetTag\n                  ? 'text-gray-900 font-semibold'\n                  : 'text-gray-300'\n              } hover:text-gray-900 hover:font-semibold `}\n              onClick={() => setTargetTag(g.fieldValue)}\n            >\n              <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n            </span>\n          </li>\n        ))}\n      </ul>\n\n      <PostList edges={tagPosts} />\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { slug: { regex: \"/^/[a-zA-Z]/\" } } }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            id\n            excerpt(pruneLength: 200, truncate: true)\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"names":["edges","React","map","node","id","excerpt","slug","fields","frontmatter","title","date","update","tags","key","className","Link","to","tag","index","group","data","allMarkdownRemark","useState","targetTag","setTargetTag","useEffect","location","hash","split","fieldValue","tagPosts","useMemo","filter","g","_group$filter$","Head","onClick","href","PostList"],"sourceRoot":""}